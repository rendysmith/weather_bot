import requests
from bs4 import BeautifulSoup
import time
import configparser
import os
import openai

config = configparser.ConfigParser()
path_db = os.path.abspath(os.path.join(os.path.dirname(__file__), "config.ini"))
config.read(path_db)

def send_telegram(text: str):
    token = config.get('bot', 'token_tg')
    url = "https://api.telegram.org/bot"
    channel_id = config.get('bot', 'channel_id')
    url += token
    method = url + "/sendMessage"

    r = requests.post(method, data={
        "chat_id": channel_id,
        "text": text,
        "parse_mode": "Markdown"
          })

    if r.status_code != 200:
        raise Exception("post_text error")

def get_txt(prompt: str):
    try:
        token = config.get('bot', 'token')
        openai.api_key = token
        model = config.get('bot', 'model')
        max_tokens = int(config.get('bot', 'max_tokens'))
        temperature = float(config.get('bot', 'temperature'))

        prompt = f'''
    Snow, –°–Ω–µ–≥, üå®
    Rain, –î–æ–∂–¥—å, üåß
    Sunny, –°–æ–ª–Ω–µ—á–Ω–æ, ‚òÄ
    {prompt},'''

        completion = openai.Completion.create(
            engine=model,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=temperature
        )
        txt = completion.choices[0].text
        txt = txt.split(',')
        return txt[1].strip(), txt[0].strip()

    except:
        return None, None

def get_weather(today_text):
    tt = '??'
    t_text = today_text

    if today_text == 'Snow':
        tt = 'üå®'
        t_text = '–°–Ω–µ–≥'
    elif today_text == 'Cloudy':
        tt = '‚òÅ'
        t_text = '–û–±–ª–∞—á–Ω–æ'
    elif today_text == 'Sleet':
        tt = 'üåß'
        t_text = '–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥'
    elif today_text == 'Foggy':
        tt = 'üå´'
        t_text = '–¢—É–º–∞–Ω'
    elif today_text == 'Clear':
        tt = '‚òÄ'
        t_text = '–Ø—Å–Ω–æ'
    elif today_text == 'Showers':
        tt = 'üåß'
        t_text = '–õ–∏–≤–µ–Ω—å'
    elif today_text == 'Sunny':
        tt = '‚òÄ'
        t_text = '–°–æ–ª–Ω–µ—á–Ω–æ'

    elif today_text == 'Mostly Sunny':
        tt = '‚òÄ'
        t_text = '–Ø—Å–Ω–æ-–°–æ–ª–Ω–µ—á–Ω–æ'

    elif today_text == 'Partly Cloudy':
        tt = '‚õÖÔ∏è'
        t_text = '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å'

    elif today_text == 'Mostly Cloudy':
        tt = 'üå•'
        t_text = '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–ª–∞—á–Ω–æ'

    elif today_text == 'Mostly Clear':
        tt = 'üå§' 
        t_text = '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ'

    elif today_text == 'Fair':
        tt = 'üå•'
        t_text = '–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤, –Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—Å–Ω–æ—Å—Ç—å'

    elif today_text == 'Mixed Rain and Snow':
        tt = 'üåß'
        t_text = '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º'

    elif today_text == 'Flurries':
        tt = 'üåß'
        t_text = '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥'

    elif today_text == 'Scattered Thunderstorms':
        tt = '‚õàÔ∏è'
        t_text = '–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–µ –≥—Ä–æ–∑—ã'

    elif today_text == 'Scattered Showers':
        tt = '‚õàÔ∏è'
        t_text = '–†–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏'

    elif today_text == 'Thunderstorms':
        tt = '‚ö°'
        t_text = '–ì—Ä–æ–∑–∞'


    return tt, t_text

def temperature():
    #https://www.yahoo.com/news/weather/kazakhstan/batys-qazaqstan/oral-2264983
    url = "https://yahoo-weather5.p.rapidapi.com/weather"
    querystring = {"lat": "51.223419", "long": "51.356411", "format": "json", "u": "c"}
    headers = {
        "X-RapidAPI-Key": "8419074986mshfb2da144f8b1085p17a241jsn5d5602969ac8",
        "X-RapidAPI-Host": "yahoo-weather5.p.rapidapi.com"
    }

    r = requests.request("GET", url, headers=headers, params=querystring).json()
    #print(r)
    now_time = r['current_observation']['pubDate']
    today = r['current_observation']['condition']
    today_tem = today['temperature']
    today_text = today['text']
    print(today_text)

    wind = r['current_observation']['wind']
    wind_s = wind['speed'] * 1.609

    pressure = r['current_observation']['atmosphere']['pressure']

    #tt, t_text = get_txt(today_text)
    tt, t_text = get_weather(today_text)

    tomorrow = r["forecasts"]
    #print(tomorrow)
    tom_tem_min = tomorrow[0]['low']
    tom_tem_max = tomorrow[0]['high']
    tom_text = tomorrow[0]['text']
    print(tom_tem_min, tom_tem_max, tom_text)

    tmt, tm_text = get_weather(tom_text)
    #tmt, tm_text = get_txt(tom_text)

    txt = f'''–°–µ–≥–æ–¥–Ω—è: t= {today_tem}¬∞C
{tt} {t_text}
–î–∞–≤–ª–µ–Ω–∏–µ:üîª{pressure}
–í–µ—Ç–µ—Ä:üí® {wind_s/3.6:.0f} –º/—Å
–ó–∞–≤—Ç—Ä–∞: max t= {tom_tem_max}¬∞C, min t= {tom_tem_min}¬∞C
{tmt} {tm_text}'''
    print(txt)
    return txt

def get_data():
    headers ={
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age=0',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 OPR/40.0.2308.81',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'DNT': '1',
        'Accept-Encoding': 'gzip, deflate, lzma, sdch',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4'
    }

    url = 'https://www.gismeteo.ru/weather-naberezhnye-chelny-4534/gm/'
    url = 'https://www.gismeteo.kz/weather-oral-5156/gm/'
    r = requests.get(url, headers=headers).text
    soup = BeautifulSoup(r, "html.parser")
    #print(soup)

    gmcurrent = soup.find('div', class_='gmcurrent').text
    num_act = int(gmcurrent[0])
    #print(num_act)

    if 0 <= num_act <= 1:
        col = 'üü¢'
    elif 2 <= num_act <= 3:
        col = 'üîµ'
    elif 4 <= num_act <= 5:
        col = 'üü°'
    elif 6 <= num_act <= 7:
        col = 'üü†'
    elif 8 <= num_act <= 9:
        col = 'üî¥'

    city = soup.find('div', class_='transparent-city js-transparent-city').text

    now_act = gmcurrent[1:]

    txt = f'''
{time.ctime()}
–ì–æ—Ä–æ–¥: {city}
{temperature()}
–ì–ú –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {num_act}
{col} {now_act}'''

    send_telegram(txt)

get_data()
